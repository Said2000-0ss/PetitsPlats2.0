//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++ PARTIE IMAGES DE MES FONCTIONS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
// Récupération de l'input et du bouton
// const searchInput = document.getElementById('searchInput');
// const searchButton = document.getElementById('searchButton');

// searchButton.addEventListener('click', function() { // Ajout d'un événement 'click' au bouton   
// const searchValue = searchInput.value;// Récupération de la valeur de l'input
// console.log(searchValue);// Affichage de la valeur dans la console
// });

//
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++ Fonctions permettant d'alimenter les differents selects ++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
// function alimenterSelects() {
//     const ustensilesSet = new Set();   // Utiliser un Set pour éviter les doublons
//     const ingredientsSet = new Set();
//     const appareilsSet = new Set();
  
//     // Vérifier que le tableau recipes est bien défini et non vide
//     if (!Array.isArray(recipes) || recipes.length === 0) {
//       console.error("Le tableau recipes est vide ou non défini");
//       return;
//     }
  
//     // Parcourir les recettes et remplir les sets
//     recipes.forEach(recipe => {
//       // Vérifier si ustensiles existe et est un tableau
//       if (Array.isArray(recipe.ustensiles)) {
//         recipe.ustensiles.forEach(ustensile => ustensilesSet.add(ustensile));
//       } else {
//         console.warn(`Ustensiles non défini pour la recette : ${recipe.name}`);
//       }
  
//       // Vérifier si ingredients existe et est un tableau
//       if (Array.isArray(recipe.ingredients)) {
//         recipe.ingredients.forEach(ingredient => ingredientsSet.add(ingredient.ingredient));
//       } else {
//         console.warn(`Ingrédients non définis pour la recette : ${recipe.name}`);
//       }
  
//       // Vérifier si appareils existe et est un tableau
//       if (Array.isArray(recipe.appareils)) {
//         recipe.appareils.forEach(appareil => appareilsSet.add(appareil));
//       } else {
//         console.warn(`Appareils non définis pour la recette : ${recipe.name}`);
//       }
//     });
  
//     // Fonction pour vider et ajouter des options dans un <select>
//     function ajouterOptionsDansSelect(selectElement, itemsSet) {
//       // Garder seulement la première option par défaut
//       selectElement.innerHTML = '<option value="" disabled selected>' + selectElement.options[0].textContent + '</option>';
  
//       // Parcourir chaque élément du set et créer une option dans le <select>
//       itemsSet.forEach(item => {
//         const option = document.createElement('option');
//         option.value = item;
//         option.textContent = item;
//         selectElement.appendChild(option);
//       });
//     }
  
//     // Récupérer les éléments <select> dans le DOM
//     const ustensilesSelect = document.getElementById('ustensiles');
//     const ingredientsSelect = document.getElementById('ingredients');
//     const appareilsSelect = document.getElementById('appareils');
  
//     // Appeler la fonction pour chaque <select> avec le set correspondant
//     ajouterOptionsDansSelect(ustensilesSelect, ustensilesSet);
//     ajouterOptionsDansSelect(ingredientsSelect, ingredientsSet);
//     ajouterOptionsDansSelect(appareilsSelect, appareilsSet);
//   }
  
//   // Appel de la fonction après le chargement du DOM
//   document.addEventListener('DOMContentLoaded', alimenterSelects);
//   console.log(ustensilesSet);
//   console.log(ingredientsSet);
//   console.log(appareilsSet);
//********************************************************************************************************* */
// function alimenterSelects() {
//     const ustensilesSet = new Set();   // Utiliser un Set pour éviter les doublons
//     const ingredientsSet = new Set();
//     const appareilsSet = new Set();
  
//     // Vérifier que le tableau recipes est bien défini et non vide
//     if (!Array.isArray(recipes) || recipes.length === 0) {
//       console.error("Le tableau recipes est vide ou non défini");
//       return;
//     }
  
//     // Parcourir les recettes et remplir les sets
//     recipes.forEach(recipe => {
//       // Vérifier si ustensiles existe et est un tableau
//       if (Array.isArray(recipe.ustensiles)) {
//         recipe.ustensiles.forEach(ustensile => ustensilesSet.add(ustensile));
//       } else {
//         console.warn(`Ustensiles non définis pour la recette : ${recipe.name}`);
//       }
  
//       // Vérifier si ingredients existe et est un tableau
//       if (Array.isArray(recipe.ingredients)) {
//         recipe.ingredients.forEach(ingredient => ingredientsSet.add(ingredient.ingredient));
//       } else {
//         console.warn(`Ingrédients non définis pour la recette : ${recipe.name}`);
//       }
  
//       // Vérifier si appareils existe et est une chaîne de caractères ou un tableau
//       if (Array.isArray(recipe.appareils)) {
//         recipe.appareils.forEach(appareil => appareilsSet.add(appareil));
//       } else if (typeof recipe.appareils === 'string') {
//         appareilsSet.add(recipe.appareils);
//       } else {
//         console.warn(`Appareils non définis pour la recette : ${recipe.name}`);
//       }
//     });
  
//     // Fonction pour vider et ajouter des options dans un <select>
//     function ajouterOptionsDansSelect(selectElement, itemsSet) {
//       // Garder seulement la première option par défaut
//       selectElement.innerHTML = '<option value="" disabled selected>' + selectElement.options[0].textContent + '</option>';
  
//       // Parcourir chaque élément du set et créer une option dans le <select>
//       itemsSet.forEach(item => {
//         const option = document.createElement('option');
//         option.value = item;
//         option.textContent = item;
//         selectElement.appendChild(option);
//       });
//     }
  
//     // Récupérer les éléments <select> dans le DOM
//     const ustensilesSelect = document.getElementById('ustensiles');
//     const ingredientsSelect = document.getElementById('ingredients');
//     const appareilsSelect = document.getElementById('appareils');
  
//     // Appeler la fonction pour chaque <select> avec le set correspondant
//     ajouterOptionsDansSelect(ustensilesSelect, ustensilesSet);
//     ajouterOptionsDansSelect(ingredientsSelect, ingredientsSet);
//     ajouterOptionsDansSelect(appareilsSelect, appareilsSet);
//   }
  
//   // Appel de la fonction après le chargement du DOM
//   document.addEventListener('DOMContentLoaded', alimenterSelects);

// // Fonction pour alimenter les listes déroulantes avec des éléments de type <li>
// function ajouterItemsDansListe(listeElement, itemsSet) {
//     // Vider la liste avant de l'alimenter
//     listeElement.innerHTML = '';
//     // Ajouter chaque item du Set comme un élément <li> dans la liste
//     itemsSet.forEach(item => {
//         const li = document.createElement('li');
//         li.textContent = item;
//         li.classList.add('dropdown-item'); // Ajout de la classe 'dropdown-item'
//         listeElement.appendChild(li); // Insertion de l'élément dans la liste
//     });
// }

// // Fonction pour alimenter les menus déroulants
// function alimenterListesDeroulantes() {
//     // Utilisation de Set pour éviter les doublons
//     const ingredientsSet = new Set();
//     const appareilsSet = new Set();
//     const ustensilesSet = new Set();

//     recipes.forEach(recipe => {
//         recipe.ingredients.forEach(ingredient => ingredientsSet.add(ingredient.ingredient));
//         appareilsSet.add(recipe.appliance);
//         recipe.ustensils.forEach(ustensile => ustensilesSet.add(ustensile));
//     });

//     const ingredientsListe = document.getElementById('ingredients-list');
//     const appareilsListe = document.getElementById('appareils-list');
//     const ustensilesListe = document.getElementById('ustensiles-list');

//     ajouterItemsDansListe(ingredientsListe, ingredientsSet);
//     ajouterItemsDansListe(appareilsListe, appareilsSet);
//     ajouterItemsDansListe(ustensilesListe, ustensilesSet);
// }

// // Fonction pour gérer l'affichage de la liste déroulante avec le chevron
// function toggleDropdown(chevronSelector, contentSelector) {
//     const chevron = document.querySelector(chevronSelector);
//     const content = document.querySelector(contentSelector);

//     if (content.classList.contains('hidden')) {
//         content.classList.remove('hidden'); // Affiche le contenu
//         chevron.classList.remove('fa-chevron-down');
//         chevron.classList.add('fa-chevron-up');
//     } else {
//         content.classList.add('hidden'); // Cache le contenu
//         chevron.classList.remove('fa-chevron-up');
//         chevron.classList.add('fa-chevron-down');
//     }
// }

// // Attacher les événements de clic pour chaque chevron
// document.querySelector('#chevron-ingredients').addEventListener('click', () => {
//     toggleDropdown('#chevron-ingredients', '#ingredients-content');
// });

// document.querySelector('#chevron-appareils').addEventListener('click', () => {
//     toggleDropdown('#chevron-appareils', '#appareils-content');
// });

// document.querySelector('#chevron-ustensiles').addEventListener('click', () => {
//     toggleDropdown('#chevron-ustensiles', '#ustensiles-content');
// });

// // Appel des fonctions lorsque le DOM est chargé
// document.addEventListener('DOMContentLoaded', () => {
//     alimenterListesDeroulantes(); // Alimenter les listes avec les données
// });